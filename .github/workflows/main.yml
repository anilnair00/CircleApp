# github action

name: Deploy 

on:
  workflow_dispatch:

env:
  # AZURE_WEBAPP_NAME: "app-munson-api-eastus-dev-001"
  ArtifactName: "TEST"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
        
      - name: Restore dependencies
        run: dotnet restore CircleApp.sln

      - name: Build
        run: dotnet build CircleApp/CircleApp.csproj --configuration Release --no-restore
        
      - name: Publish project
        run: dotnet publish CircleApp/CircleApp.csproj --configuration Release --output ./publish

      - name: Create deployment zip
        run: |
          cd ./publish
          zip -r ../CircleApp.zip .
          cd ..
  
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: CircleAppPackage
          path: CircleApp.zip

  deployOnDev:
    runs-on: dev
    needs: build
    # if: github.base_ref == 'develop' || startsWith(github.ref, 'refs/heads/feature/*')
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
          name: CircleAppPackage
          path: CircleAppPackage
          
    - name: Deploy with Web Deploy
      shell: powershell
      run: |
          $msdeploy = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe"          
          & $msdeploy `
            -verb:sync `
            -source:package="CircleAppPackage/CircleApp.zip" `
            -dest:'auto,computerName="https://Testvm:8172/msdeploy.axd?site=test.com",username="sam",password="p@ssword@123",authType="Basic"' `
            -allowUntrusted


    # - name: Deploy with Pass-through Auth
    #   run: |
    #     "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe" -verb:sync `
    #       -source:contentPath="$(Resolve-Path ./CircleAppPackage/CircleApp.zip)" `
    #       -dest:contentPath="Default Web Site/CircleApp",computerName="https://20.245.242.103:8172/msdeploy.axd?site=Default Web Site",authType=NTLM -allowUntrusted

# msdeploy.exe -verb:sync `
#   -source:contentPath="D:\CircleApp" `
#   -dest:contentPath="C:\inetpub\wwwroot\CircleApp"
  
    # - name: Deploy locally
      # shell: powershell
      # run: |
      #   Expand-Archive -Path CircleAppPackage/CircleApp.zip -DestinationPath "C:\inetpub\wwwroot\CircleApp" -Force
      #   # Restart-WebAppPool -Name "DefaultAppPool"
      #   $appPool = "DefaultAppPool"
    
      #   # Check current state
      #   $state = (Get-WebAppPoolState -Name $appPool).Value
    
      #   if ($state -eq "Stopped") {
      #       Write-Host "App Pool is stopped. Starting..."
      #       Start-WebAppPool -Name $appPool
      #   } else {
      #       Write-Host "App Pool is running. Restarting..."
      #       Restart-WebAppPool -Name $appPool
      #   }      
    # - name: Deploy to IIS
    #   shell: powershell
    #   run: |
    #     $PackagePath = "$(Resolve-Path ./CircleAppPackage/CircleApp.zip)"
    #     $Server      = "20.245.242.103"
    #     $User        = "sam"
    #     $Pass        = "p@ssword@123"
    #     $Site        = "Default Web Site/CircleApp"
    #     $msdeploy    = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe"
    
        # & "$msdeploy" -verb:sync `
        #   -source:package="$PackagePath" `
        #   -dest:iisApp="$Site",computerName="https://$Server:8172/msdeploy.axd",userName="$User",password="$Pass",authType="Basic" `
        #   -allowUntrusted -enableRule:DoNotDeleteRule

    # - name: Deploy to IIS with MSDeploy
    #   shell: powershell
    #   run: |
    #       $PackagePath  = "$(Resolve-Path ./CircleAppPackage/CircleApp.zip)"
    #       $SiteName     = "Default Web Site"
    #       $AppName      = "MercuryHealth"
    #       $Server       = "20.245.242.103"    # e.g. 20.245.242.103
    #       $Username     = "sam"  # deployment user
    #       $Password     = "p@ssword@123"  # deployment password
    #       $msdeployPath = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe"

    #       # Debug info
    #       Write-Host "Deploying $PackagePath to $Server / $SiteName/$AppName"

    #       # Run msdeploy to create/update IIS virtual application
    #       & "$msdeployPath" -verb:sync `
    #         -source:package="$PackagePath" `
    #         -dest:iisApp="$SiteName/$AppName",computerName="https://$Server:8172/msdeploy.axd",userName="$Username",password="$Password",authType="Basic" `
    #         -allowUntrusted -enableRule:DoNotDeleteRule
###############################################################################################
    # - name: Deploy to IIS with msdeploy
    #   shell: powershell
    #   run: |
    #       # Stop on any error
    #       $ErrorActionPreference = "Stop"
          
    #       # ---------------- Configuration ----------------
    #       $SiteName     = "Default Web Site"
    #       $AppPool      = "DefaultAppPool"
    #       $PhysicalPath = "C:\inetpub\wwwroot\CircleApp"
    #       $PackagePath  = "C:\Users\Sam\actions-runner\actions-runner\_work\CircleApp\CircleApp\CircleAppPackage\CircleApp.zip"
    #       $Server       = "20.245.242.103"
    #       $Username     = "sam"
    #       $Password     = "p@ssword@123"
    #       $msdeployPath = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe"
          
    #       Import-Module WebAdministration
          
    #       # ---------------- Check if site exists ----------------
    #       $site = Get-Website | Where-Object { $_.Name -eq $SiteName }
          
    #       if (-not $site) {
    #           Write-Host "Site '$SiteName' does not exist. Creating new site..."
          
    #           # Create app pool if it doesn't exist
    #           if (-not (Get-WebAppPoolState -Name $AppPool -ErrorAction SilentlyContinue)) {
    #               New-WebAppPool -Name $AppPool
    #               Write-Host "App Pool '$AppPool' created."
    #           }
          
    #           # Create the site
    #           if (-not (Test-Path $PhysicalPath)) {
    #               New-Item -ItemType Directory -Path $PhysicalPath -Force
    #           }
          
    #           New-Website -Name $SiteName -Port 80 -PhysicalPath $PhysicalPath -ApplicationPool $AppPool
    #           Write-Host "Site '$SiteName' created."
    #       } else {
    #           Write-Host "Site '$SiteName' exists. Updating content..."
    #       }
          
    #       # ---------------- Ensure physical path exists ----------------
    #       if (-not (Test-Path $PhysicalPath)) {
    #           New-Item -ItemType Directory -Path $PhysicalPath -Force
    #       }
          
    #       # ---------------- Debug Info ----------------
    #       $Comp

    
      #     publish-profile: ${{ secrets.API_PUBLISH_SECRET }}
      #     package: ./publish
