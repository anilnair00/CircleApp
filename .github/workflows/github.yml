name: github teting 

on:
  workflow_dispatch:
  # pull_request:
  #   types: [opened, synchronize, reopened, closed]
  push:
    branches:
     - master
     - develop
     - release

env:
  # AZURE_WEBAPP_NAME: "app-munson-api-eastus-dev-001"
  ArtifactName: "TEST"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
        
      - name: Restore dependencies
        run: dotnet restore CircleApp.sln

      - name: Build
        run: dotnet build CircleApp/CircleApp.csproj --configuration Release --no-restore
        
      - name: Publish project
        run: dotnet publish CircleApp/CircleApp.csproj --configuration Release --output ./publish

      - name: Create deployment zip
        run: |
          cd ./publish
          zip -r ../CircleApp.zip .
          cd ..
  
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: CircleAppPackage
          path: CircleApp.zip

  deployOnDev:
    runs-on: runner1
    needs: build
    # if: github.base_ref == 'master'
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
          name: CircleAppPackage
          path: CircleAppPackage

    - name: Deploy via WinRM
      run: |
          python3 - <<'EOF'
          import os, winrm, base64

          # --- Config ---
          win_host = "${{ secrets.IIS_HOST }}"      # IIS public IP or DNS
          win_user = "${{ secrets.IIS_USER }}"      # Windows user
          win_pass = "${{ secrets.IIS_PASSWORD }}"      # Windows password
          local_folder = "CircleAppPackage/CircleAppPackage.zip"                # Build output folder on runner
          remote_temp = "C:\\temp\\"          # Temp staging folder on IIS
          remote_wwwroot = "C:\\inetpub\\wwwroot\\CircleApp"

          # --- Connect to WinRM ---
          session = winrm.Session(
              f'http://{win_host}:5985/wsman',
              auth=(win_user, win_pass),
              transport='ntlm'   # Use NTLM for Windows domain/local accounts
          )

          # --- Ensure temp folder exists ---
          session.run_ps(f"New-Item -Path {remote_temp} -ItemType Directory -Force")

          # --- Upload files one by one ---
          for root, dirs, files in os.walk(local_folder):
              for file in files:
                  local_path = os.path.join(root, file)
                  rel_path = os.path.relpath(local_path, local_folder)
                  remote_path = os.path.join(remote_temp, rel_path).replace("/", "\\")
                  remote_dir = os.path.dirname(remote_path)

                  # ensure remote dir exists
                  session.run_ps(f"New-Item -Path '{remote_dir}' -ItemType Directory -Force")

                  # upload file content (base64 encode to avoid corruption)
                  with open(local_path, "rb") as f:
                      content = base64.b64encode(f.read()).decode("utf-8")
                  ps_script = f"""
                  $bytes = [System.Convert]::FromBase64String("{content}")
                  [System.IO.File]::WriteAllBytes("{remote_path}", $bytes)
                  """
                  session.run_ps(ps_script)

          # --- Move to IIS wwwroot ---
          session.run_ps(f"Copy-Item {remote_temp}\\* {remote_wwwroot} -Recurse -Force")

          # --- Restart IIS ---
          r = session.run_ps("iisreset")
          print(r.std_out.decode(), r.std_err.decode())
          EOF




  
