name: storage teting 

on:
  workflow_dispatch:
  # pull_request:
  #   types: [opened, synchronize, reopened, closed]
  # push:
  #   branches:
  #    - master
  #    - develop
  #    - release

env:
  # AZURE_WEBAPP_NAME: "app-munson-api-eastus-dev-001"
  ArtifactName: "TEST"

permissions:
  contents: read
  pages: write
  id-token: write
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
        
      - name: Restore dependencies
        run: dotnet restore CircleApp.sln

      - name: Build
        run: dotnet build CircleApp/CircleApp.csproj --configuration Release --no-restore
        
      - name: Publish project
        run: dotnet publish CircleApp/CircleApp.csproj --configuration Release --output ./publish

      - name: Create deployment zip
        run: |
          cd ./publish
          zip -r ../CircleApp.zip .
          cd ..
      # - name: Zip Publish Artifact
      #   run: |
      #     mkdir -p ${{ github.workspace }}/CircleApp/Publish
      #     cd ${{ github.workspace }}/temp/publish
      #     zip -r ${{ github.workspace }}/CircleApp/Publish/publish.zip .
      #     # zip -r ../myapp.zip .
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: CircleAppPackage
          path: CircleApp.zip

  deployOnDev:
    runs-on: runner1
    needs: build
    # if: github.base_ref == 'master'
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
          name: CircleAppPackage
          path: CircleAppPackage

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        
    - name: Login to Azure Subscription
      uses: azure/login@v1
      with:
       client-id: ${{ secrets.DEV_AZURE_CLIENT_ID }}
       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
       allow-no-subscriptions: true

      # 3. Upload artifact to Azure Storage so the VM can fetch it
    - name: Upload to Azure Storage
      run: |
          az storage blob upload \
            --account-name testvmgroupb7e2  \
            --container-name artifacts \
            --file CircleAppPackage/CircleApp.zip \
            --name CircleApp_${{ github.run_id }}.zip \
            # --overwrite

      # 7. Trigger IIS Deployment
    - name: Deploy to IIS VM
      run: |
          az vm run-command invoke \
            --resource-group testvm_group \
            --name testvm \
            --command-id RunPowerShellScript \
            --scripts deploy.ps1 \
            --parameters "RunId=${{ github.run_id }}"

      # 4. Deploy into VM (download + extract + restart IIS)
    # - name: Deploy on IIS VM
    #   run: |
    #       az vm run-command invoke \
    #         --resource-group testvm_group \
    #         --name testvm \
    #         --command-id RunPowerShellScript \
    #         --scripts "Invoke-WebRequest -Uri 'https://testvmgroupb7e2.blob.core.windows.net/artifacts/CircleApp.zip' -OutFile 'C:\\temp\\'; Expand-Archive -Path 'C:\\temp\\CircleApp.zip' -DestinationPath 'C:\\inetpub\\wwwroot\\CircleApp' -Force; Import-Module WebAdministration; Restart-WebAppPool -Name 'DefaultAppPool'"
    #         --command-id RunPowerShellScript \
            # --scripts "Copy-Item 'CircleAppPackage/CircleApp.zip' -Destination 'C:\\deploy\\'"
